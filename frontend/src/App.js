"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const axios_1 = require("axios");
const react_bootstrap_1 = require("react-bootstrap");
require("bootstrap/dist/css/bootstrap.min.css");
require("./App.css");
function App() {
    const baseUri = process.env.REACT_APP_API_URL;
    const [allPhotos, setAllPhotos] = react_1.useState([]);
    const [currentPhoto, setCurrentPhoto] = react_1.useState("");
    async function fetchPhotos() {
        const { data } = await axios_1.default.get(`${baseUri}getAllPhotos`);
        console.log(data);
        setAllPhotos(data);
    }
    react_1.useEffect(() => {
        fetchPhotos();
    }, []);
    function getCarouselImage(photo) {
        return (<react_bootstrap_1.Carousel.Item interval={1000} style={{ height: 350 }}>
        <img src={photo.url} alt={photo.filename} className="h-100"/>
        <react_bootstrap_1.Carousel.Caption>
          <h3 style={{ backgroundColor: "rgba(0,0,0,0.3)" }}>
            {photo.filename}
          </h3>
        </react_bootstrap_1.Carousel.Caption>
      </react_bootstrap_1.Carousel.Item>);
    }
    function getSingleImage(name) {
        const photo = allPhotos.find((p) => p.filename === name);
        return <img src={photo.url} alt={photo.filename} className="h-100"/>;
    }
    function onDropdownChange(eventKey, event) {
        setCurrentPhoto(eventKey);
    }
    return (<div className="App bg-secondary min-vh-100">
      <h1 className="display-3 p-3 mb-5">Super Mario & Friends</h1>
      <react_bootstrap_1.Row>
        <react_bootstrap_1.Col>
          <react_bootstrap_1.Carousel>{allPhotos.map(getCarouselImage)}</react_bootstrap_1.Carousel>
        </react_bootstrap_1.Col>
        <react_bootstrap_1.Col>
          <react_bootstrap_1.Dropdown onSelect={onDropdownChange}>
            <react_bootstrap_1.Dropdown.Toggle id="dropdown-basic">
              {currentPhoto === "" ? "Choose a Character" : currentPhoto}
            </react_bootstrap_1.Dropdown.Toggle>

            <react_bootstrap_1.Dropdown.Menu>
              {allPhotos.map((photo) => {
        return <react_bootstrap_1.Dropdown.Item eventKey={photo.filename}>{photo.filename}</react_bootstrap_1.Dropdown.Item>;
    })}
            </react_bootstrap_1.Dropdown.Menu>
          </react_bootstrap_1.Dropdown>
          {currentPhoto !== "" && getSingleImage(currentPhoto)}
        </react_bootstrap_1.Col>
      </react_bootstrap_1.Row>
    </div>);
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQXBwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFtRDtBQUNuRCxpQ0FBMEI7QUFDMUIscURBQStEO0FBQy9ELGdEQUE4QztBQUM5QyxxQkFBbUI7QUFFbkIsU0FBUyxHQUFHO0lBQ1YsTUFBTSxPQUFPLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBa0IsQ0FBQztJQUV2RCxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxHQUFHLGdCQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxnQkFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXJELEtBQUssVUFBVSxXQUFXO1FBQ3hCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLGNBQWMsQ0FBQyxDQUFDO1FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQkFBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLFdBQVcsRUFBRSxDQUFDO0lBQ2hCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLFNBQVMsZ0JBQWdCLENBQUMsS0FBVTtRQUNsQyxPQUFPLENBQ0wsQ0FBQywwQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUNwRDtRQUFBLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFDM0Q7UUFBQSxDQUFDLDBCQUFRLENBQUMsT0FBTyxDQUNmO1VBQUEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUNoRDtZQUFBLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakI7VUFBQSxFQUFFLEVBQUUsQ0FDTjtRQUFBLEVBQUUsMEJBQVEsQ0FBQyxPQUFPLENBQ3BCO01BQUEsRUFBRSwwQkFBUSxDQUFDLElBQUksQ0FBQyxDQUNqQixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsY0FBYyxDQUFDLElBQVk7UUFDbEMsTUFBTSxLQUFLLEdBQVEsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxTQUFTLGdCQUFnQixDQUFDLFFBQWEsRUFBRSxLQUFhO1FBQ3BELGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsQ0FDMUM7TUFBQSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUM1RDtNQUFBLENBQUMscUJBQUcsQ0FDRjtRQUFBLENBQUMscUJBQUcsQ0FDRjtVQUFBLENBQUMsMEJBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLDBCQUFRLENBQ3ZEO1FBQUEsRUFBRSxxQkFBRyxDQUNMO1FBQUEsQ0FBQyxxQkFBRyxDQUNGO1VBQUEsQ0FBQywwQkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQ25DO1lBQUEsQ0FBQywwQkFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQ2xDO2NBQUEsQ0FBQyxZQUFZLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUM1RDtZQUFBLEVBQUUsMEJBQVEsQ0FBQyxNQUFNLENBRWpCOztZQUFBLENBQUMsMEJBQVEsQ0FBQyxJQUFJLENBQ1o7Y0FBQSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUN2QixPQUFPLENBQUMsMEJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUUsS0FBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUUsS0FBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLDBCQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDLENBQ0o7WUFBQSxFQUFFLDBCQUFRLENBQUMsSUFBSSxDQUNqQjtVQUFBLEVBQUUsMEJBQVEsQ0FDVjtVQUFBLENBQUMsWUFBWSxLQUFLLEVBQUUsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLENBQ3REO1FBQUEsRUFBRSxxQkFBRyxDQUNQO01BQUEsRUFBRSxxQkFBRyxDQUNQO0lBQUEsRUFBRSxHQUFHLENBQUMsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELGtCQUFlLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBDYXJvdXNlbCwgUm93LCBDb2wsIERyb3Bkb3duIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuaW1wb3J0IFwiYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCI7XG5pbXBvcnQgXCIuL0FwcC5jc3NcIjtcblxuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBiYXNlVXJpOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQVBJX1VSTCE7XG5cbiAgY29uc3QgW2FsbFBob3Rvcywgc2V0QWxsUGhvdG9zXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2N1cnJlbnRQaG90bywgc2V0Q3VycmVudFBob3RvXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGZldGNoUGhvdG9zKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KGAke2Jhc2VVcml9Z2V0QWxsUGhvdG9zYCk7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgc2V0QWxsUGhvdG9zKGRhdGEpO1xuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmZXRjaFBob3RvcygpO1xuICB9LCBbXSk7XG5cbiAgZnVuY3Rpb24gZ2V0Q2Fyb3VzZWxJbWFnZShwaG90bzogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDYXJvdXNlbC5JdGVtIGludGVydmFsPXsxMDAwfSBzdHlsZT17eyBoZWlnaHQ6IDM1MCB9fT5cbiAgICAgICAgPGltZyBzcmM9e3Bob3RvLnVybH0gYWx0PXtwaG90by5maWxlbmFtZX0gY2xhc3NOYW1lPVwiaC0xMDBcIiAvPlxuICAgICAgICA8Q2Fyb3VzZWwuQ2FwdGlvbj5cbiAgICAgICAgICA8aDMgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwwLDAsMC4zKVwiIH19PlxuICAgICAgICAgICAge3Bob3RvLmZpbGVuYW1lfVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvQ2Fyb3VzZWwuQ2FwdGlvbj5cbiAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2luZ2xlSW1hZ2UobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcGhvdG86IGFueSA9IGFsbFBob3Rvcy5maW5kKChwOiBhbnkpID0+IHAuZmlsZW5hbWUgPT09IG5hbWUpO1xuICAgIHJldHVybiA8aW1nIHNyYz17cGhvdG8udXJsfSBhbHQ9e3Bob3RvLmZpbGVuYW1lfSBjbGFzc05hbWU9XCJoLTEwMFwiIC8+O1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ecm9wZG93bkNoYW5nZShldmVudEtleTogYW55LCBldmVudDogT2JqZWN0KSB7XG4gICAgc2V0Q3VycmVudFBob3RvKGV2ZW50S2V5KTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJBcHAgYmctc2Vjb25kYXJ5IG1pbi12aC0xMDBcIj5cbiAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTMgcC0zIG1iLTVcIj5TdXBlciBNYXJpbyAmIEZyaWVuZHM8L2gxPlxuICAgICAgPFJvdz5cbiAgICAgICAgPENvbD5cbiAgICAgICAgICA8Q2Fyb3VzZWw+e2FsbFBob3Rvcy5tYXAoZ2V0Q2Fyb3VzZWxJbWFnZSl9PC9DYXJvdXNlbD5cbiAgICAgICAgPC9Db2w+XG4gICAgICAgIDxDb2w+XG4gICAgICAgICAgPERyb3Bkb3duIG9uU2VsZWN0PXtvbkRyb3Bkb3duQ2hhbmdlfT5cbiAgICAgICAgICAgIDxEcm9wZG93bi5Ub2dnbGUgaWQ9XCJkcm9wZG93bi1iYXNpY1wiPlxuICAgICAgICAgICAgICB7Y3VycmVudFBob3RvID09PSBcIlwiID8gXCJDaG9vc2UgYSBDaGFyYWN0ZXJcIiA6IGN1cnJlbnRQaG90b31cbiAgICAgICAgICAgIDwvRHJvcGRvd24uVG9nZ2xlPlxuXG4gICAgICAgICAgICA8RHJvcGRvd24uTWVudT5cbiAgICAgICAgICAgICAge2FsbFBob3Rvcy5tYXAoKHBob3RvKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxEcm9wZG93bi5JdGVtIGV2ZW50S2V5PXsocGhvdG8gYXMgYW55KS5maWxlbmFtZX0+eyhwaG90byBhcyBhbnkpLmZpbGVuYW1lfTwvRHJvcGRvd24uSXRlbT47XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9Ecm9wZG93bi5NZW51PlxuICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAge2N1cnJlbnRQaG90byAhPT0gXCJcIiAmJiBnZXRTaW5nbGVJbWFnZShjdXJyZW50UGhvdG8pfVxuICAgICAgICA8L0NvbD5cbiAgICAgIDwvUm93PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iXX0=